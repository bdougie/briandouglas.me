---
import Navigation from '../components/Navigation.astro';
import Footer from '../components/Footer.astro';

interface Props {
  title?: string;
  description?: string;
  isBlogPost?: boolean;
  frontmatter?: {
    title: string;
    description?: string;
    date?: string;
  };
}

const { 
  title = "bdougie on the internet", 
  description = "A blog managed by Brian Douglas",
  isBlogPost = false,
  frontmatter
} = Astro.props;

// Use frontmatter data for blog posts, fallback to props for other pages
const pageTitle = isBlogPost && frontmatter?.title ? frontmatter.title : title;
const pageDescription = isBlogPost && frontmatter?.description ? frontmatter.description : description;

// Get the canonical URL for the current page
const canonicalURL = new URL(Astro.url.pathname, Astro.site || 'https://briandouglas.me');

// Ensure we have a site URL for OG images
const siteUrl = Astro.site?.toString().replace(/\/$/, '') || 'https://briandouglas.me';

// Generate OG image URL that exactly matches the route structure
let ogImageURL;
if (isBlogPost && Astro.url.pathname.includes('/posts/')) {
  // Extract the post path after /posts/
  const postPath = Astro.url.pathname.replace(/^\/posts\//, '').replace(/\/$/, '');
  
  if (postPath) {
    // Use the exact same path structure for OG images
    ogImageURL = `${siteUrl}/og-image/${postPath}/`;
    console.log('Generated blog post OG URL:', ogImageURL);
  } else {
    // Fallback for unusual path structure
    ogImageURL = `${siteUrl}/og-image/home/`;  // Change to match dynamic route format
  }
} else {
  // Home page or other pages - use the home slug in dynamic route
  ogImageURL = `${siteUrl}/og-image/home/`;  // Change to match dynamic route format
}

// Static fallback if needed
const fallbackImageUrl = `${siteUrl}/static-og/`;

// Final URL for meta tags
const finalOgImageUrl = ogImageURL || fallbackImageUrl;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#282a3a" media="(prefers-color-scheme: dark)" />
    <meta name="theme-color" content="#f9fafb" media="(prefers-color-scheme: light)" />
    
    <!-- Theme detection script -->
    <script is:inline>
      // Execute immediately during page load
      const theme = localStorage.getItem('theme') || 
                    (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
      document.documentElement.classList.toggle('dark', theme === 'dark');
      localStorage.setItem('theme', theme);
    </script>
    
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin="anonymous" />
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Basic Meta Tags -->
    <title>{pageTitle}</title>
    <meta name="description" content={pageDescription} />
    <meta name="author" content="Brian Douglas" />
    <meta name="robots" content="index, follow" />
    
    <!-- Open Graph / Social Media Meta Tags -->
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={pageDescription} />
    <meta property="og:type" content={isBlogPost ? "article" : "website"} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={finalOgImageUrl} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:image:alt" content={pageTitle} />
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@bdougieyo" />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={pageDescription} />
    <meta name="twitter:image" content={finalOgImageUrl} />
    
    {isBlogPost && frontmatter?.date && (
      <meta property="article:published_time" content={new Date(frontmatter.date).toISOString()} />
    )}
    
    <link rel="canonical" href={canonicalURL} />
    <link rel="sitemap" href="/sitemap.xml" />
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Debug comment -->
    <!-- OG Image URL: {finalOgImageUrl} -->
    
    <!-- Structured Data -->
    <script type="application/ld+json">
      {JSON.stringify({
        "@context": "https://schema.org",
        "@type": isBlogPost ? "BlogPosting" : "WebSite",
        ...(isBlogPost ? {
          "headline": pageTitle,
          "description": pageDescription,
          "author": {
            "@type": "Person",
            "name": "Brian Douglas"
          },
          "datePublished": frontmatter?.date ? new Date(frontmatter.date).toISOString() : undefined,
          "url": canonicalURL.toString()
        } : {
          "name": "bdougie on the internet",
          "url": canonicalURL.toString(),
          "description": pageDescription,
          "author": {
            "@type": "Person",
            "name": "Brian Douglas"
          }
        })
      })}
    </script>
  </head>
  <body class="bg-gray-50 dark:bg-primary text-highlight dark:text-text-light min-h-screen transition-colors duration-200" lang="en">
    <div class="max-w-3xl mx-auto px-4 py-8">
      <header class="mb-12">
        <Navigation />
      </header>
      <main>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style is:global>
  :root {
    --accent: 115, 95, 50;
    --accent-light: 198, 151, 73;
    --accent-dark: 40, 42, 58;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      rgb(var(--accent-dark)) 60%
    );
  }

  body {
    color: var(--text-gray); /* Use the new gray color for light mode */
  }

  .dark body {
    color: var(--text-light); /* Use existing variable for dark mode */
  }
</style>